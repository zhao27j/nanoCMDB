# Generated by Django 4.2.13 on 2024-05-30 12:18

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import nanopay.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('nanoassets', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('briefing', models.CharField(max_length=64, null=True, unique=True, verbose_name='Briefing')),
                ('type', models.CharField(choices=[('M', 'Maintenance'), ('N', 'New'), ('R', 'Rental'), ('E', 'Expired'), ('T', 'Terminated')], default='M', max_length=1, verbose_name='Contract Type')),
                ('startup', models.DateField(null=True, verbose_name='From')),
                ('endup', models.DateField(blank=True, null=True, verbose_name='To')),
                ('scanned_copy', models.FileField(blank=True, max_length=256, null=True, upload_to=nanopay.models.contract_scanned_copy_path, verbose_name='Scanned Copy')),
                ('assets', models.ManyToManyField(blank=True, to='nanoassets.instance', verbose_name='Assets associated with')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
            ],
            options={
                'ordering': ['-startup'],
            },
        ),
        migrations.CreateModel(
            name='NonPayrollExpense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('non_payroll_expense_year', models.DecimalField(decimal_places=0, default=2024, max_digits=4, verbose_name='Budget Year')),
                ('non_payroll_expense_reforecasting', models.CharField(choices=[('Q0', 'Q0'), ('Q1', 'Q1'), ('Q2', 'Q2'), ('Q3', 'Q3')], default='Q0', max_length=2, verbose_name='Quarterly Reforecasting')),
                ('originating_sub_region', models.CharField(max_length=32, verbose_name='Originating Sub Region')),
                ('functional_department', models.CharField(max_length=32, verbose_name='Functional Department')),
                ('global_gl_account', models.DecimalField(decimal_places=0, max_digits=6, verbose_name='Global GL Account')),
                ('vendor', models.CharField(blank=True, max_length=64, null=True, verbose_name='Vendor')),
                ('global_expense_tracking_id', models.CharField(max_length=16, verbose_name='Global Expense Tracking ID')),
                ('currency', models.CharField(choices=[('CNY', '￥'), ('USD', '$')], default='CNY', max_length=3, verbose_name='Currency')),
                ('allocation', models.CharField(max_length=128, verbose_name='Allocation')),
                ('description', models.TextField(verbose_name='Description')),
                ('jan', models.DecimalField(decimal_places=2, default=0, max_digits=8, verbose_name='Jan')),
                ('feb', models.DecimalField(decimal_places=2, default=0, max_digits=8, verbose_name='Feb')),
                ('mar', models.DecimalField(decimal_places=2, default=0, max_digits=8, verbose_name='Mar')),
                ('apr', models.DecimalField(decimal_places=2, default=0, max_digits=8, verbose_name='Apr')),
                ('may', models.DecimalField(decimal_places=2, default=0, max_digits=8, verbose_name='May')),
                ('jun', models.DecimalField(decimal_places=2, default=0, max_digits=8, verbose_name='Jun')),
                ('jul', models.DecimalField(decimal_places=2, default=0, max_digits=8, verbose_name='Jul')),
                ('aug', models.DecimalField(decimal_places=2, default=0, max_digits=8, verbose_name='Aug')),
                ('sep', models.DecimalField(decimal_places=2, default=0, max_digits=8, verbose_name='Sep')),
                ('oct', models.DecimalField(decimal_places=2, default=0, max_digits=8, verbose_name='Oct')),
                ('nov', models.DecimalField(decimal_places=2, default=0, max_digits=8, verbose_name='Nov')),
                ('dec', models.DecimalField(decimal_places=2, default=0, max_digits=8, verbose_name='Dec')),
                ('is_direct_cost', models.CharField(choices=[('Y', 'Yes'), ('N', 'NO')], default='N', max_length=1, verbose_name='Is Direct Cost')),
                ('created_on', models.DateField(auto_now_add=True, null=True, verbose_name='Created on')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
            ],
            options={
                'ordering': ['non_payroll_expense_year', 'non_payroll_expense_reforecasting', 'allocation'],
            },
        ),
        migrations.CreateModel(
            name='Prjct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=16, unique=True, verbose_name='Project Name')),
            ],
        ),
        migrations.CreateModel(
            name='PaymentTerm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pay_day', models.DateTimeField(verbose_name='Scheduled Pay day')),
                ('plan', models.CharField(choices=[('M', 'Monthly'), ('Q', 'Quarterly'), ('S', 'Semi-anually'), ('A', 'Anually'), ('C', 'Custom')], default='M', max_length=1, verbose_name='Plan')),
                ('recurring', models.DecimalField(decimal_places=0, default=1, max_digits=2, verbose_name='Recurring')),
                ('amount', models.FloatField(verbose_name='Amount')),
                ('applied_on', models.DateTimeField(blank=True, null=True, verbose_name='Applied on')),
                ('contract', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='nanopay.contract', verbose_name='Contract')),
            ],
            options={
                'ordering': ['contract', 'pay_day'],
            },
        ),
        migrations.CreateModel(
            name='PaymentRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Unique ID for the particular request', primary_key=True, serialize=False, verbose_name='Request ID')),
                ('status', models.CharField(choices=[('I', 'Initialized'), ('A', 'Approved')], default='I', max_length=1, verbose_name='Request status')),
                ('budget_category', models.CharField(choices=[('D', 'Development Budget'), ('O', 'Operation Budget')], default='O', max_length=1, verbose_name='Budget category')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=8, null=True, verbose_name='Invoice Amount')),
                ('scanned_copy', models.FileField(blank=True, max_length=256, null=True, upload_to=nanopay.models.invoice_scanned_copy_path, verbose_name='Scanned Copy of Invoice')),
                ('requested_on', models.DateTimeField(auto_now=True, null=True, verbose_name='Requested on')),
                ('IT_reviewed_on', models.DateTimeField(blank=True, null=True, verbose_name='IT reviewed on')),
                ('IT_reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='IT reviewed by')),
                ('non_payroll_expense', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nanopay.nonpayrollexpense', verbose_name='Non Payroll Expense')),
                ('payment_term', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nanopay.paymentterm', verbose_name='Payment Term')),
                ('requested_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Requested by')),
            ],
            options={
                'ordering': ['-status', 'requested_on'],
            },
        ),
        migrations.CreateModel(
            name='LegalEntity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='主体名称')),
                ('type', models.CharField(choices=[('I', 'Internal'), ('E', 'External')], default='E', max_length=1, verbose_name='主体类型')),
                ('code', models.CharField(blank=True, max_length=8, null=True, verbose_name='编码')),
                ('deposit_bank', models.CharField(blank=True, max_length=64, null=True, verbose_name='开户行')),
                ('deposit_bank_account', models.CharField(blank=True, max_length=32, null=True, verbose_name='开户行账号')),
                ('tax_number', models.CharField(blank=True, max_length=32, null=True, verbose_name='纳税人识别号')),
                ('reg_addr', models.CharField(blank=True, max_length=64, null=True, verbose_name='注册地址')),
                ('reg_phone', models.CharField(blank=True, max_length=16, null=True, verbose_name='注册电话')),
                ('postal_addr', models.CharField(blank=True, max_length=256, null=True, verbose_name='Postal Address')),
                ('prjct', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nanopay.prjct', verbose_name='Project Name')),
            ],
            options={
                'ordering': ['type', 'name'],
            },
        ),
        migrations.AddField(
            model_name='contract',
            name='party_a_list',
            field=models.ManyToManyField(related_name='partyas', to='nanopay.legalentity', verbose_name='Party A'),
        ),
        migrations.AddField(
            model_name='contract',
            name='party_b_list',
            field=models.ManyToManyField(related_name='partybs', to='nanopay.legalentity', verbose_name='Party B'),
        ),
    ]
