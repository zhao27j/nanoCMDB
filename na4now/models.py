
# activity_history = models.ForeignKey("nanoassets.ActivityHistory", verbose_name=(_("Activity History")), on_delete=models.SET_NULL, null=True, blank=True)

class ActivityHistory(models.Model):
    description = models.TextField(_("Description"))
    # created_on = models.DateTimeField(_("Created on"), auto_now=False, auto_now_add=True)
    # created_by = models.ForeignKey(User, verbose_name=(_("Created by")), on_delete=models.SET_NULL, null=True)
    Instance = models.ForeignKey("nanoassets.Instance", verbose_name=(_("IT Assets")), on_delete=models.SET_NULL, null=True, blank=True)
    Contract = models.ForeignKey("nanopay.Contract", verbose_name=(_("Contract")), on_delete=models.SET_NULL, null=True, blank=True)

    def __str__(self):
        return self.description
    
    class Meta:
        ordering = ['-description',]


class Configuragion(models.Model):
    hostname = models.CharField(_("Hostname"), max_length=32, primary_key=True, default=uuid.uuid4, help_text='Hostname')

    def __str__(self):
        return self.hostname

    def get_absolute_url(self):
        return reverse("nanoassets:configuration-detail", kwargs={"pk": self.pk})


def paper_form_path(instance, filename):
    file_name_base, file_name_ext = os.path.splitext(filename)
    file_name = str(instance.id) + '_' + file_name_base + '_generated by_' + instance.requested_by.username + file_name_ext
    file_path = 'uploads/payment_request/' + str(datetime.date.today().year)
    full_file_name = os.path.join(file_path, file_name)

    return full_file_name


class ScrapRequest(models.Model):
    case_id = models.UUIDField(_("Request case ID"), primary_key=True, default=uuid.uuid4, help_text='Unique ID for the particular request')
    REQUEST_STATUS = (
        ('I', 'Initialized'),
        ('A', 'Approved'),
    )
    status = models.CharField(_("Request status"), choices=REQUEST_STATUS, default='I', max_length=1)
    # instance = models.ForeignKey("nanoassets.Instance", verbose_name=(_("Instance")), on_delete=models.SET_NULL, null=True, blank=True)
    requested_by = models.ForeignKey(User, verbose_name=(_("Requested by")), related_name='+', on_delete=models.SET_NULL, null=True, blank=True)
    requested_on = models.DateField(_("Requested on"), auto_now=False, auto_now_add=True, blank=True, null=True)
    approved_by = models.ForeignKey(User, verbose_name=(_("Approved by")), related_name='+', on_delete=models.SET_NULL, null=True, blank=True)
    approved_on = models.DateField(_("Approved on"), auto_now=False, auto_now_add=False, blank=True, null=True)

    def __str__(self):
        # return '%s Scrapping Request %s by %s on %s, Approved by %s on %s' % (self.case_id, self.status, self.requested_by, str(self.requested_on), self.approved_by, str(self.approved_on))
        return str(self.case_id)

    def get_absolute_url(self):
        # return reverse("nanoassets:scrap-request-detail", kwargs={"pk": self.pk})
        return reverse("nanoassets:instance-disposal-request-detail", kwargs={"pk": self.pk})

    class Meta:
        ordering = ['requested_on',]
